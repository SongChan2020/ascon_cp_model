include "globals.mzn";
include "chuffed.mzn";

%Modeling of differential characteristics
array [0..4, 0..63] of var 0..1: start_d; %before S-box
array [0..4, 0..63] of var 0..1: end_d; %after S-box
array [0..64*4-1] of var {0,2,3,4}: prb;

%starting point
constraint start_d[0,0] == 1;
constraint start_d[0,3] == 1;
constraint sum(i in 0..4, j in 0..63)(start_d[i,j]) == 2;

%Modeling the substitution layer
array [1..317, 1..11] of int : DDT = array2d(1..317, 1..11, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 3, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 3, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 3, 0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 3, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 3, 0, 0, 0, 0, 1, 1, 1, 0, 1, 0, 3, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 3, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 3, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 3, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 3, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 3, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 3, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 3, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 3, 0, 0, 0, 1, 0, 1, 1, 1, 0, 1, 3, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 3, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 3, 0, 0, 0, 1, 1, 0, 0, 1, 0, 1, 3, 0, 0, 0, 1, 1, 0, 1, 0, 0, 1, 3, 0, 0, 0, 1, 1, 0, 1, 1, 0, 1, 3, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 3, 0, 0, 0, 1, 1, 1, 0, 1, 0, 0, 3, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 3, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 3, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 2, 0, 0, 1, 0, 0, 0, 1, 1, 1, 0, 2, 0, 0, 1, 0, 0, 1, 0, 1, 1, 0, 2, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 2, 0, 0, 1, 0, 1, 1, 0, 0, 0, 1, 3, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 3, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 3, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 3, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 3, 0, 0, 1, 0, 1, 1, 1, 0, 1, 0, 3, 0, 0, 1, 0, 1, 1, 1, 1, 0, 1, 3, 0, 0, 1, 0, 1, 1, 1, 1, 1, 1, 3, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 4, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 4, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1, 4, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1, 4, 0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 4, 0, 0, 1, 1, 0, 0, 1, 0, 1, 1, 4, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 4, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 4, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 4, 0, 0, 1, 1, 0, 1, 0, 0, 1, 1, 4, 0, 0, 1, 1, 0, 1, 0, 1, 0, 1, 4, 0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 4, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 4, 0, 0, 1, 1, 0, 1, 1, 0, 1, 1, 4, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 4, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 4, 0, 0, 1, 1, 1, 0, 0, 0, 1, 0, 3, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 3, 0, 0, 1, 1, 1, 0, 0, 1, 1, 0, 3, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 0, 1, 0, 3, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 3, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 3, 0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 3, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 3, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 3, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 3, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 3, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 3, 0, 1, 0, 0, 0, 1, 0, 1, 1, 1, 3, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 3, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 3, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 4, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 4, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 4, 0, 1, 0, 0, 1, 0, 0, 1, 1, 0, 4, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 4, 0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 4, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 4, 0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 4, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 4, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 4, 0, 1, 0, 0, 1, 1, 0, 1, 0, 1, 4, 0, 1, 0, 0, 1, 1, 0, 1, 1, 1, 4, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 4, 0, 1, 0, 0, 1, 1, 1, 0, 1, 1, 4, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 4, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 4, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 4, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 4, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 4, 0, 1, 0, 1, 0, 0, 0, 1, 1, 1, 4, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 4, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 4, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 4, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 4, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 4, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 4, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 4, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 4, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 4, 0, 1, 0, 1, 0, 1, 1, 0, 1, 0, 4, 0, 1, 0, 1, 0, 1, 1, 1, 0, 0, 4, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 4, 0, 1, 0, 1, 1, 0, 0, 0, 1, 0, 4, 0, 1, 0, 1, 1, 0, 0, 0, 1, 1, 4, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 4, 0, 1, 0, 1, 1, 0, 0, 1, 1, 1, 4, 0, 1, 0, 1, 1, 0, 1, 0, 1, 0, 4, 0, 1, 0, 1, 1, 0, 1, 0, 1, 1, 4, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 4, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 4, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 4, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 4, 0, 1, 0, 1, 1, 1, 0, 1, 1, 0, 4, 0, 1, 0, 1, 1, 1, 0, 1, 1, 1, 4, 0, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 0, 1, 0, 1, 1, 1, 1, 0, 1, 1, 4, 0, 1, 0, 1, 1, 1, 1, 1, 1, 0, 4, 0, 1, 0, 1, 1, 1, 1, 1, 1, 1, 4, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 2, 0, 1, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 2, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 2, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 4, 0, 1, 1, 0, 1, 0, 0, 0, 1, 1, 4, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 4, 0, 1, 1, 0, 1, 0, 0, 1, 1, 1, 4, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 4, 0, 1, 1, 0, 1, 0, 1, 0, 1, 0, 4, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 4, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 4, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 4, 0, 1, 1, 0, 1, 1, 0, 0, 1, 0, 4, 0, 1, 1, 0, 1, 1, 0, 1, 0, 0, 4, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0, 4, 0, 1, 1, 0, 1, 1, 1, 0, 0, 1, 4, 0, 1, 1, 0, 1, 1, 1, 0, 1, 1, 4, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1, 4, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 4, 0, 1, 1, 1, 0, 0, 0, 0, 0, 1, 3, 0, 1, 1, 1, 0, 0, 0, 0, 1, 0, 3, 0, 1, 1, 1, 0, 0, 0, 1, 0, 0, 3, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 3, 0, 1, 1, 1, 0, 1, 0, 0, 0, 1, 3, 0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 3, 0, 1, 1, 1, 0, 1, 0, 1, 0, 0, 3, 0, 1, 1, 1, 0, 1, 0, 1, 1, 1, 3, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 3, 0, 1, 1, 1, 1, 0, 1, 0, 0, 1, 3, 0, 1, 1, 1, 1, 0, 1, 1, 0, 0, 3, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 3, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 3, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 3, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 3, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 3, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 2, 1, 0, 0, 0, 0, 0, 1, 0, 1, 1, 2, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 2, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 2, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 2, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 2, 1, 0, 0, 0, 1, 1, 0, 1, 0, 1, 2, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 2, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 4, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 4, 1, 0, 0, 1, 0, 0, 0, 1, 0, 1, 4, 1, 0, 0, 1, 0, 0, 0, 1, 1, 1, 4, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 4, 1, 0, 0, 1, 0, 0, 1, 0, 1, 1, 4, 1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 4, 1, 0, 0, 1, 0, 0, 1, 1, 1, 1, 4, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 4, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 4, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 4, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 4, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 4, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 4, 1, 0, 0, 1, 0, 1, 1, 1, 0, 0, 4, 1, 0, 0, 1, 0, 1, 1, 1, 1, 0, 4, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 2, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0, 2, 1, 0, 0, 1, 1, 0, 1, 0, 1, 0, 2, 1, 0, 0, 1, 1, 0, 1, 1, 0, 0, 2, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 1, 0, 1, 3, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 3, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 3, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 3, 1, 0, 1, 0, 0, 0, 1, 1, 0, 1, 3, 1, 0, 1, 0, 0, 0, 1, 1, 1, 0, 3, 1, 0, 1, 0, 0, 0, 1, 1, 1, 1, 3, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 3, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 3, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 3, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 3, 1, 0, 1, 0, 1, 1, 0, 0, 0, 1, 3, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 3, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1, 3, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1, 3, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 4, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 4, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 4, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 4, 1, 0, 1, 1, 0, 1, 0, 1, 0, 0, 4, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 4, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 4, 1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 4, 1, 0, 1, 1, 0, 1, 1, 0, 0, 0, 4, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 4, 1, 0, 1, 1, 0, 1, 1, 0, 1, 0, 4, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 4, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0, 4, 1, 0, 1, 1, 0, 1, 1, 1, 0, 1, 4, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 4, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 4, 1, 0, 1, 1, 1, 0, 0, 0, 1, 0, 3, 1, 0, 1, 1, 1, 0, 0, 1, 0, 0, 3, 1, 0, 1, 1, 1, 0, 1, 0, 1, 0, 3, 1, 0, 1, 1, 1, 0, 1, 1, 0, 0, 3, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 3, 1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 3, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 3, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 3, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 4, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 4, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 4, 1, 1, 0, 0, 0, 0, 0, 1, 1, 1, 4, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 4, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 4, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 4, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 4, 1, 1, 0, 0, 0, 1, 0, 1, 0, 0, 4, 1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 4, 1, 1, 0, 0, 0, 1, 0, 1, 1, 0, 4, 1, 1, 0, 0, 0, 1, 0, 1, 1, 1, 4, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 4, 1, 1, 0, 0, 0, 1, 1, 1, 0, 1, 4, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0, 4, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 4, 1, 1, 0, 0, 1, 0, 0, 0, 1, 1, 3, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 3, 1, 1, 0, 0, 1, 0, 1, 0, 0, 0, 3, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 3, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 3, 1, 1, 0, 0, 1, 1, 0, 1, 0, 1, 3, 1, 1, 0, 0, 1, 1, 1, 0, 1, 1, 3, 1, 1, 0, 0, 1, 1, 1, 1, 1, 0, 3, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 4, 1, 1, 0, 1, 0, 0, 0, 0, 1, 0, 4, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 4, 1, 1, 0, 1, 0, 0, 0, 1, 1, 0, 4, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 4, 1, 1, 0, 1, 0, 0, 1, 0, 1, 1, 4, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 4, 1, 1, 0, 1, 0, 0, 1, 1, 1, 1, 4, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 4, 1, 1, 0, 1, 0, 1, 0, 0, 1, 0, 4, 1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 4, 1, 1, 0, 1, 0, 1, 0, 1, 1, 0, 4, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 4, 1, 1, 0, 1, 0, 1, 1, 0, 1, 1, 4, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 4, 1, 1, 0, 1, 0, 1, 1, 1, 1, 1, 4, 1, 1, 0, 1, 1, 0, 0, 0, 1, 0, 4, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 4, 1, 1, 0, 1, 1, 0, 0, 1, 0, 0, 4, 1, 1, 0, 1, 1, 0, 0, 1, 0, 1, 4, 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 4, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 4, 1, 1, 0, 1, 1, 0, 1, 1, 0, 0, 4, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 4, 1, 1, 0, 1, 1, 1, 0, 0, 1, 0, 4, 1, 1, 0, 1, 1, 1, 0, 0, 1, 1, 4, 1, 1, 0, 1, 1, 1, 0, 1, 0, 0, 4, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1, 4, 1, 1, 0, 1, 1, 1, 1, 0, 1, 0, 4, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 4, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 4, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 4, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 3, 1, 1, 1, 0, 0, 0, 0, 0, 1, 1, 3, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0, 3, 1, 1, 1, 0, 0, 0, 1, 0, 1, 0, 3, 1, 1, 1, 0, 0, 1, 0, 0, 0, 0, 3, 1, 1, 1, 0, 0, 1, 0, 0, 1, 0, 3, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 3, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 3, 1, 1, 1, 0, 1, 0, 0, 0, 1, 1, 3, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 3, 1, 1, 1, 0, 1, 0, 1, 0, 0, 0, 3, 1, 1, 1, 0, 1, 0, 1, 1, 1, 0, 3, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 3, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 3, 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 3, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 3, 1, 1, 1, 1, 0, 0, 1, 0, 0, 0, 4, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 4, 1, 1, 1, 1, 0, 0, 1, 0, 1, 0, 4, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 4, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 4, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 4, 1, 1, 1, 1, 0, 0, 1, 1, 1, 0, 4, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 4, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 4, 1, 1, 1, 1, 0, 1, 1, 0, 0, 1, 4, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 4, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 4, 1, 1, 1, 1, 0, 1, 1, 1, 0, 0, 4, 1, 1, 1, 1, 0, 1, 1, 1, 0, 1, 4, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 4, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 4, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 3, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 3, 1, 1, 1, 1, 1, 0, 0, 1, 0, 0, 3, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 3, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 3, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 3, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 3, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 3]);

constraint forall (i in 0..63) (
             table([start_d[0,i],start_d[1,i], start_d[2,i], start_d[3,i], start_d[4,i],
                    end_d[0,i],end_d[1,i], end_d[2,i], end_d[3,i], end_d[4,i],
              prb[i]], DDT)); 

%Modeling the linear layer
predicate Xor4(
  array[0..63] of var 0..1: a, 
  array[0..63] of var 0..1: b,
  array[0..63] of var 0..1: c, 
  array[0..63] of var 0..1: d)=
    forall(i in 0..63)(a[i]+b[i]+c[i]+d[i] in {0,2,4});

function array[0..63] of var 0..1: RRot(array[0..63] of var 0..50: X, int: val)=array1d(0..63, [X[(64+j-val) mod 64] | j in 0..63]);

%row 0    
constraint(
let {
    array [0..63] of var 0..1:tmp=RRot(array1d(0..63,[end_d[0,j] | j in 0..63]),19),
    array [0..63] of var 0..1:tmpb=RRot(array1d(0..63,[end_d[0,j] | j in 0..63]),28),
    array [0..63] of var 0..1:tmpc=array1d(0..63,[end_d[0,j] | j in 0..63]), 
    array [0..63] of var 0..1:tmpd=array1d(0..63,[statestart[0,0,j] | j in 0..63])
}
in Xor4(tmp, tmpb, tmpc, tmpd)
);
%row 1
constraint(
let {
    array [0..63] of var 0..1:tmp=RRot(array1d(0..63,[end_d[1,j] | j in 0..63]),61),
    array [0..63] of var 0..1:tmpb=RRot(array1d(0..63,[end_d[1,j] | j in 0..63]),39), 
    array [0..63] of var 0..1:tmpc=array1d(0..63,[end_d[1,j] | j in 0..63]), 
    array [0..63] of var 0..1:tmpd=array1d(0..63,[statestart[0,1,j] | j in 0..63])
}
in Xor4(tmp, tmpb, tmpc, tmpd)
);
%row 2
constraint(
let {
    array [0..63] of var 0..1:tmp=RRot(array1d(0..63,[end_d[2,j] | j in 0..63]),1),
    array [0..63] of var 0..1:tmpb=RRot(array1d(0..63,[end_d[2,j] | j in 0..63]),6),
    array [0..63] of var 0..1:tmpc=array1d(0..63,[end_d[2,j] | j in 0..63]),
    array [0..63] of var 0..1:tmpd=array1d(0..63,[statestart[0,2,j] | j in 0..63])
}
in Xor4(tmp, tmpb, tmpc, tmpd)
);
%row 3
constraint(
let {
    array [0..63] of var 0..1:tmp=RRot(array1d(0..63,[end_d[3,j] | j in 0..63]),10),
    array [0..63] of var 0..1:tmpb=RRot(array1d(0..63,[end_d[3,j] | j in 0..63]),17),
    array [0..63] of var 0..1:tmpc=array1d(0..63,[end_d[3,j] | j in 0..63]),
    array [0..63] of var 0..1:tmpd=array1d(0..63,[statestart[0,3,j] | j in 0..63])
}
in Xor4(tmp, tmpb, tmpc, tmpd)
);
%row 4
constraint(
let {
    array [0..63] of var 0..1:tmp=RRot(array1d(0..63,[end_d[4,j] | j in 0..63]),7),
    array [0..63] of var 0..1:tmpb=RRot(array1d(0..63,[end_d[4,j] | j in 0..63]),41),
    array [0..63] of var 0..1:tmpc=array1d(0..63,[end_d[4,j] | j in 0..63]),
    array [0..63] of var 0..1:tmpd=array1d(0..63,[statestart[0,4,j] | j in 0..63])
}
in Xor4(tmp, tmpb, tmpc, tmpd)
);

%Modeling of truncated differential characteristics
array [0..2, 0..4, 0..63] of var 0..4: statestart; %before S-box
array [0..2, 0..4, 0..63] of var 0..4: stateend; %after S-box
array [0..2, 0..4, 0..63] of var 0..20: tmpL;

%Modeling the substitution layer
array [1..243, 1..11] of int : DDT1 = array2d(1..243, 1..11, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 1, 4, 4, 4, 0, 0, 0, 0, 1, 0, 1, 4, 4, 4, 1, 0, 0, 0, 0, 1, 1, 4, 4, 4, 0, 4, 0, 0, 0, 1, 0, 0, 4, 4, 1, 1, 0, 0, 0, 0, 1, 0, 1, 1, 4, 4, 4, 4, 0, 0, 0, 1, 1, 0, 4, 4, 4, 4, 1, 0, 0, 0, 1, 1, 1, 0, 4, 4, 1, 4, 0, 0, 1, 0, 0, 0, 4, 4, 1, 1, 4, 0, 0, 1, 0, 0, 1, 4, 4, 4, 4, 4, 0, 0, 1, 0, 1, 0, 4, 4, 4, 4, 4, 0, 0, 1, 0, 1, 1, 4, 4, 4, 1, 4, 0, 0, 1, 1, 0, 0, 4, 4, 0, 0, 4, 0, 0, 1, 1, 0, 1, 4, 4, 4, 4, 4, 0, 0, 1, 1, 1, 0, 4, 0, 4, 4, 4, 0, 0, 1, 1, 1, 1, 4, 1, 4, 0, 4, 0, 1, 0, 0, 0, 0, 4, 1, 0, 4, 4, 0, 1, 0, 0, 0, 1, 1, 0, 4, 4, 1, 0, 1, 0, 0, 1, 0, 4, 4, 4, 4, 4, 0, 1, 0, 0, 1, 1, 0, 4, 4, 4, 0, 0, 1, 0, 1, 0, 0, 0, 4, 1, 4, 4, 0, 1, 0, 1, 0, 1, 4, 4, 4, 4, 1, 0, 1, 0, 1, 1, 0, 1, 4, 4, 4, 4, 0, 1, 0, 1, 1, 1, 4, 4, 4, 4, 0, 0, 1, 1, 0, 0, 0, 4, 4, 1, 4, 4, 0, 1, 1, 0, 0, 1, 4, 4, 4, 4, 4, 0, 1, 1, 0, 1, 0, 4, 4, 4, 4, 4, 0, 1, 1, 0, 1, 1, 4, 4, 4, 4, 4, 0, 1, 1, 1, 0, 0, 4, 4, 0, 4, 4, 0, 1, 1, 1, 0, 1, 4, 4, 4, 4, 4, 0, 1, 1, 1, 1, 0, 4, 1, 4, 4, 4, 0, 1, 1, 1, 1, 1, 4, 0, 4, 4, 4, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 1, 4, 4, 4, 4, 4, 4, 0, 0, 0, 1, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 1, 1, 4, 4, 4, 4, 4, 4, 0, 0, 1, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 1, 0, 1, 4, 4, 4, 4, 4, 4, 0, 0, 1, 1, 0, 4, 4, 4, 4, 4, 4, 0, 0, 1, 1, 1, 4, 4, 4, 4, 4, 4, 0, 1, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 1, 0, 0, 1, 4, 4, 4, 4, 4, 4, 0, 1, 0, 1, 0, 4, 4, 4, 4, 4, 4, 0, 1, 0, 1, 1, 4, 4, 4, 4, 4, 4, 0, 1, 1, 0, 0, 4, 4, 4, 4, 4, 4, 0, 1, 1, 0, 1, 4, 4, 4, 4, 4, 4, 0, 1, 1, 1, 0, 4, 4, 4, 4, 4, 4, 0, 1, 1, 1, 1, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 1, 4, 4, 4, 4, 4, 0, 0, 0, 1, 4, 0, 4, 4, 4, 4, 4, 0, 0, 0, 1, 4, 1, 4, 4, 4, 4, 4, 0, 0, 1, 0, 4, 0, 4, 4, 4, 4, 4, 0, 0, 1, 0, 4, 1, 4, 4, 4, 4, 4, 0, 0, 1, 1, 4, 0, 4, 4, 4, 4, 4, 0, 0, 1, 1, 4, 1, 4, 4, 4, 4, 4, 0, 1, 0, 0, 4, 0, 4, 4, 4, 4, 4, 0, 1, 0, 0, 4, 1, 4, 4, 4, 4, 4, 0, 1, 0, 1, 4, 0, 4, 4, 4, 4, 4, 0, 1, 0, 1, 4, 1, 4, 4, 4, 4, 4, 0, 1, 1, 0, 4, 0, 4, 4, 4, 4, 4, 0, 1, 1, 0, 4, 1, 4, 4, 4, 4, 4, 0, 1, 1, 1, 4, 0, 4, 4, 4, 4, 4, 0, 1, 1, 1, 4, 1, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 4, 0, 1, 4, 4, 4, 4, 4, 0, 0, 0, 4, 1, 0, 4, 4, 4, 4, 1, 0, 0, 0, 4, 1, 1, 4, 4, 4, 4, 4, 0, 0, 1, 4, 0, 0, 4, 4, 4, 4, 4, 0, 0, 1, 4, 0, 1, 4, 4, 4, 4, 4, 0, 0, 1, 4, 1, 0, 4, 4, 4, 4, 4, 0, 0, 1, 4, 1, 1, 4, 4, 4, 4, 4, 0, 1, 0, 4, 0, 0, 4, 4, 4, 4, 4, 0, 1, 0, 4, 0, 1, 4, 4, 4, 4, 1, 0, 1, 0, 4, 1, 0, 4, 4, 4, 4, 4, 0, 1, 0, 4, 1, 1, 4, 4, 4, 4, 0, 0, 1, 1, 4, 0, 0, 4, 4, 4, 4, 4, 0, 1, 1, 4, 0, 1, 4, 4, 4, 4, 4, 0, 1, 1, 4, 1, 0, 4, 4, 4, 4, 4, 0, 1, 1, 4, 1, 1, 4, 4, 4, 4, 4, 0, 0, 4, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 4, 0, 0, 1, 4, 4, 4, 4, 4, 0, 0, 4, 0, 1, 0, 4, 4, 4, 4, 4, 0, 0, 4, 0, 1, 1, 4, 4, 4, 4, 4, 0, 0, 4, 1, 0, 0, 4, 4, 4, 4, 4, 0, 0, 4, 1, 0, 1, 4, 4, 4, 4, 4, 0, 0, 4, 1, 1, 0, 4, 4, 4, 4, 4, 0, 0, 4, 1, 1, 1, 4, 4, 4, 4, 4, 0, 1, 4, 0, 0, 0, 4, 4, 4, 4, 4, 0, 1, 4, 0, 0, 1, 4, 4, 4, 4, 4, 0, 1, 4, 0, 1, 0, 4, 4, 4, 4, 4, 0, 1, 4, 0, 1, 1, 4, 4, 4, 4, 4, 0, 1, 4, 1, 0, 0, 4, 4, 4, 4, 4, 0, 1, 4, 1, 0, 1, 4, 4, 4, 4, 4, 0, 1, 4, 1, 1, 0, 4, 4, 4, 4, 4, 0, 1, 4, 1, 1, 1, 4, 4, 4, 4, 4, 0, 4, 0, 0, 0, 0, 4, 4, 0, 4, 4, 0, 4, 0, 0, 0, 1, 4, 4, 4, 4, 4, 0, 4, 0, 0, 1, 0, 4, 4, 4, 4, 4, 0, 4, 0, 0, 1, 1, 4, 4, 4, 4, 4, 0, 4, 0, 1, 0, 0, 4, 4, 1, 4, 4, 0, 4, 0, 1, 0, 1, 4, 4, 4, 4, 4, 0, 4, 0, 1, 1, 0, 4, 4, 4, 4, 4, 0, 4, 0, 1, 1, 1, 4, 4, 4, 4, 4, 0, 4, 1, 0, 0, 0, 4, 4, 1, 4, 4, 0, 4, 1, 0, 0, 1, 4, 4, 4, 4, 4, 0, 4, 1, 0, 1, 0, 4, 4, 4, 4, 4, 0, 4, 1, 0, 1, 1, 4, 4, 4, 4, 4, 0, 4, 1, 1, 0, 0, 4, 4, 0, 4, 4, 0, 4, 1, 1, 0, 1, 4, 4, 4, 4, 4, 0, 4, 1, 1, 1, 0, 4, 4, 4, 4, 4, 0, 4, 1, 1, 1, 1, 4, 4, 4, 4, 4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 1, 4, 4, 4, 4, 4, 4, 4, 0, 0, 1, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 1, 1, 4, 4, 4, 4, 4, 4, 4, 0, 1, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 1, 0, 1, 4, 4, 4, 4, 4, 4, 4, 0, 1, 1, 0, 4, 4, 4, 4, 4, 4, 4, 0, 1, 1, 1, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 1, 4, 4, 4, 4, 4, 4, 0, 0, 1, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 1, 4, 1, 4, 4, 4, 4, 4, 4, 0, 1, 0, 4, 0, 4, 4, 4, 4, 4, 4, 0, 1, 0, 4, 1, 4, 4, 4, 4, 4, 4, 0, 1, 1, 4, 0, 4, 4, 4, 4, 4, 4, 0, 1, 1, 4, 1, 4, 4, 4, 4, 4, 4, 0, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 0, 1, 4, 4, 4, 4, 4, 4, 0, 0, 4, 1, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 1, 1, 4, 4, 4, 4, 4, 4, 0, 1, 4, 0, 0, 4, 4, 4, 4, 4, 4, 0, 1, 4, 0, 1, 4, 4, 4, 4, 4, 4, 0, 1, 4, 1, 0, 4, 4, 4, 4, 4, 4, 0, 1, 4, 1, 1, 4, 4, 4, 4, 4, 4, 0, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 0, 4, 0, 0, 1, 4, 4, 4, 4, 4, 4, 0, 4, 0, 1, 0, 4, 4, 4, 4, 4, 4, 0, 4, 0, 1, 1, 4, 4, 4, 4, 4, 4, 0, 4, 1, 0, 0, 4, 4, 4, 4, 4, 4, 0, 4, 1, 0, 1, 4, 4, 4, 4, 4, 4, 0, 4, 1, 1, 0, 4, 4, 4, 4, 4, 4, 0, 4, 1, 1, 1, 4, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 1, 4, 4, 4, 4, 4, 0, 0, 1, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 1, 4, 4, 1, 4, 4, 4, 4, 4, 0, 1, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 1, 0, 4, 4, 1, 4, 4, 4, 4, 4, 0, 1, 1, 4, 4, 0, 4, 4, 4, 4, 4, 0, 1, 1, 4, 4, 1, 4, 4, 4, 4, 4, 0, 0, 4, 0, 4, 0, 4, 4, 4, 4, 4, 0, 0, 4, 0, 4, 1, 4, 4, 4, 4, 4, 0, 0, 4, 1, 4, 0, 4, 4, 4, 4, 4, 0, 0, 4, 1, 4, 1, 4, 4, 4, 4, 4, 0, 1, 4, 0, 4, 0, 4, 4, 4, 4, 4, 0, 1, 4, 0, 4, 1, 4, 4, 4, 4, 4, 0, 1, 4, 1, 4, 0, 4, 4, 4, 4, 4, 0, 1, 4, 1, 4, 1, 4, 4, 4, 4, 4, 0, 4, 0, 0, 4, 0, 4, 4, 4, 4, 4, 0, 4, 0, 0, 4, 1, 4, 4, 4, 4, 4, 0, 4, 0, 1, 4, 0, 4, 4, 4, 4, 4, 0, 4, 0, 1, 4, 1, 4, 4, 4, 4, 4, 0, 4, 1, 0, 4, 0, 4, 4, 4, 4, 4, 0, 4, 1, 0, 4, 1, 4, 4, 4, 4, 4, 0, 4, 1, 1, 4, 0, 4, 4, 4, 4, 4, 0, 4, 1, 1, 4, 1, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 0, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 1, 4, 4, 4, 4, 4, 0, 0, 4, 4, 1, 0, 4, 4, 4, 4, 4, 0, 0, 4, 4, 1, 1, 4, 4, 4, 4, 4, 0, 1, 4, 4, 0, 0, 4, 4, 4, 4, 4, 0, 1, 4, 4, 0, 1, 4, 4, 4, 4, 4, 0, 1, 4, 4, 1, 0, 4, 4, 4, 4, 4, 0, 1, 4, 4, 1, 1, 4, 4, 4, 4, 4, 0, 4, 0, 4, 0, 0, 4, 4, 4, 4, 4, 0, 4, 0, 4, 0, 1, 4, 4, 4, 4, 4, 0, 4, 0, 4, 1, 0, 4, 4, 4, 4, 4, 0, 4, 0, 4, 1, 1, 4, 4, 4, 4, 4, 0, 4, 1, 4, 0, 0, 4, 4, 4, 4, 4, 0, 4, 1, 4, 0, 1, 4, 4, 4, 4, 4, 0, 4, 1, 4, 1, 0, 4, 4, 4, 4, 4, 0, 4, 1, 4, 1, 1, 4, 4, 4, 4, 4, 0, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 0, 4, 4, 0, 0, 1, 4, 4, 4, 4, 4, 0, 4, 4, 0, 1, 0, 4, 4, 4, 4, 4, 0, 4, 4, 0, 1, 1, 4, 4, 4, 4, 4, 0, 4, 4, 1, 0, 0, 4, 4, 4, 4, 4, 0, 4, 4, 1, 0, 1, 4, 4, 4, 4, 4, 0, 4, 4, 1, 1, 0, 4, 4, 4, 4, 4, 0, 4, 4, 1, 1, 1, 4, 4, 4, 4, 4, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 1, 4, 4, 4, 4, 4, 4, 4, 4, 0, 1, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 1, 1, 4, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 1, 4, 4, 4, 4, 4, 4, 4, 0, 1, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 1, 4, 1, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 1, 4, 4, 4, 4, 4, 4, 4, 0, 4, 1, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 1, 1, 4, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 1, 4, 4, 4, 4, 4, 4, 0, 1, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 1, 4, 4, 1, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 0, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 1, 4, 4, 4, 4, 4, 4, 0, 4, 1, 4, 0, 4, 4, 4, 4, 4, 4, 0, 4, 1, 4, 1, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 1, 4, 4, 4, 4, 4, 4, 0, 4, 4, 1, 0, 4, 4, 4, 4, 4, 4, 0, 4, 4, 1, 1, 4, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 1, 4, 4, 4, 4, 4, 0, 1, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 1, 4, 4, 4, 1, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 1, 4, 4, 4, 4, 4, 0, 4, 1, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 1, 4, 4, 1, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 1, 4, 4, 4, 4, 4, 0, 4, 4, 1, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 1, 4, 1, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 1, 4, 4, 4, 4, 4, 0, 4, 4, 4, 1, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 1, 1, 4, 4, 4, 4, 4, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 1, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 1, 4, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 1, 4, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 1, 4, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 1, 4, 4, 4, 4, 4, 0, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 0,]);

constraint forall (r in 0..2, i in 0..63) (
             table([statestart[r,0,i],statestart[r,1,i], statestart[r,2,i], statestart[r,3,i], statestart[r,4,i],
                    stateend[r,0,i],stateend[r,1,i], stateend[r,2,i], stateend[r,3,i], stateend[r,4,i],
              prb[64*(r+1)+i]], DDT1)); 
              
%Modeling the linear layer
constraint forall(r in 0..1, j in 0..63) (tmpL[r,0,j] = stateend[r,0,j] + stateend[r,0,(j+45) mod 64] + stateend[r,0,(j+36) mod 64]);
constraint forall(r in 0..1, j in 0..63) (tmpL[r,1,j] = stateend[r,1,j] + stateend[r,1,(j+3) mod 64] + stateend[r,1,(j+25) mod 64]);
constraint forall(r in 0..1, j in 0..63) (tmpL[r,2,j] = stateend[r,2,j] + stateend[r,2,(j+63) mod 64] + stateend[r,2,(j+58) mod 64]);
constraint forall(r in 0..1, j in 0..63) (tmpL[r,3,j] = stateend[r,3,j] + stateend[r,3,(j+54) mod 64] + stateend[r,3,(j+47) mod 64]);
constraint forall(r in 0..1, j in 0..63) (tmpL[r,4,j] = stateend[r,4,j] + stateend[r,4,(j+57) mod 64] + stateend[r,4,(j+23) mod 64]);

constraint forall(r in 0..1, i in 0..4, j in 0..63) (
   if((tmpL[r,i,j]==0) \/ (tmpL[r,i,j]==2)) then statestart[r+1,i,j]==0
   elseif((tmpL[r,i,j]==1) \/ (tmpL[r,i,j]==3)) then statestart[r+1,i,j]==1
   else statestart[r+1,i,j]==4 endif );

array [0..63] of var 0..1: W;
array [0..4, 0..63] of var 0..100: valid;
array [0..63] of var 0..4: V;
array [0..4, 0..63] of var 0..1: undis;
array [0..63] of var 0..4: U;
var int: obj;             

%number of valid zero bits  
constraint forall(i in 0..4, j in 0..63) (
   if(statestart[2,i,j]==0) then valid[i,j]==1
   elseif(statestart[2,i,j]==1) then valid[i,j]==100
   else valid[i,j]==0 endif );

constraint forall(j in 0..63) (
   if(valid[0,j] + valid[1,j] + valid[2,j] + valid[3,j] + valid[4,j] >= 100) then V[j]==0
   else V[j]==valid[0,j] + valid[1,j] + valid[2,j] + valid[3,j] + valid[4,j] endif);

%number of undisturbed bits    
constraint forall(i in 0..4, j in 0..63) (
    if((stateend[2,i,j]==0) \/ (stateend[2,i,j]==1)) then undis[i,j]==1 else undis[i,j]==0 endif);
        
constraint forall(j in 0..63) (U[j]==undis[0,j] + undis[1,j] + undis[2,j] + undis[3,j] + undis[4,j]);

constraint forall(j in 0..63) (
   if(V[j]==0) then W[j]==0 endif);  
   
%adv>0
constraint (sum(j in 0..63)(W[j] * V[j]) + sum (q in 0..63)(((W[q] + 1) mod 2) * U[q])) > sum(i in 0..63)(prb[i]);

%objective function
constraint obj = sum(i in 0..63)(prb[i]) + (sum(i in 0..63)(W[i])) * 5 - sum(j in 0..63)(V[j] * W[j]);
solve minimize obj;

% Output
output ["beforeSB : \n"] ++ [show([start_d[i,j] | j in 0..63]) ++ " \n" | i in 0..4] ;
        
output ["afterSB : \n"] ++ [show([end_d[i,j] | j in 0..63]) ++ " \n" | i in 0..4] ;

output ["beforeSB : \n"] ++ [show([statestart[0,i,j] | j in 0..63]) ++ " \n" | i in 0..4] ;
        
output ["afterSB : \n"] ++ [show([stateend[0,i,j] | j in 0..63]) ++ " \n" | i in 0..4] ;
        
output ["beforeSB : \n"] ++ [show([statestart[1,i,j] | j in 0..63]) ++ " \n" | i in 0..4] ;
        
output ["afterSB : \n"] ++ [show([stateend[1,i,j] | j in 0..63]) ++ " \n" | i in 0..4] ;

output ["beforeSB : \n"] ++ [show([statestart[2,i,j] | j in 0..63]) ++ " \n" | i in 0..4] ;

output ["afterSB : \n"] ++ [show([stateend[2,i,j] | j in 0..63]) ++ " \n" | i in 0..4] ;

output [show(obj) ++ "\n"];